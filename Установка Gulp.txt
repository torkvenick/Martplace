1. Установка галпа глобально: в консоле пишем npm i gulp -g 
ДОСТАТОЧНО УСТАНОВИТЬ ОДИН РАЗ НА КОМПЕ		
(npm (node packet manager) - огромный ресурс плагинов. Здесь есть все)

2. Создаем файл .json в нашем проекте (директории)
	npm init
	(package.json) - это файлы с информацией для установки. Очень важны!
	
	ВАЖНО!!! - ТЕРМИНАЛ ДОЛЖЕН БЫТЬ ОТКРЫТЫМ В НАЧАЛЬНОЙ ПАПКЕ ПРОЕКТА

3. Записываем версию GULP в файл package.json. Позволяет получить доступ к проекту с любого компа мира. Это как ключ (я о --save-dev).
	npm i gulp --save-dev
   после установки появляется файл package-lock.json и папка node_modules (папка нужна для работы gulp. В ней все плагины)

4. Создание файла, где будут находиться наши настройки. 
   Его название gulpfile.js
   
5. Создаем папку app, где будут находиться наши знакомые файлы и папки (кроме css)

6. В index.html прописываем путь к стилям 
  <link rel="stylesheet" href="css/libs.min.css">
  <link rel="stylesheet" href="css/style.min.css">

 ВАЖНО!!! - папку СSS не создаем сознательно, так как она будет подтягиваться к SCSS. !!!
  
7. Прописываем перед закрывающимся body 
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script> --jquery
  <script src="js/libs.min.js"></script>
  <script src="js/main.min.js"></script>
  
8. Устанавливаем первый плагин. Он конвертирует SCSS в CSS (Gulp SASS)
	npm i gulp-sass --save-dev
	
	
	ВАЖНО!!! - плагины можно выбирать на gulpjs.com
	
9. Заходим в файл gulpfile.js и делаем так,чтобы SASS конвертировался в CSS. Для этого нужна ПЕРЕМЕННАЯ.
	
10. Создаем переменную let gulp = require('gulp'); -- мы GULP называем GULP'ом, потому что это ЛОГИЧНО! 
	Переменная наделяется способностями GULP.
	
11. Создаем переменную let sass = require('gulp-sass'); -- позволяет конвертировать SASS и SCSS в CSS и умеет конвертировать оба формата.

12. Создаем в app папку SCSS, а в ней файл style.scss

13. Конвертируем SASS в CSS. Даем задание (task)
	.task() -- это метод (точка, слово, скобки) В скобках даем имя методу и можем задать функцию.
	function нужен для того, чтобы метод работал не единожды, а сколько нам нужно.
	
	gulp.task('sass', function(){
		return  gulp.src('app/scss/style.scss')  -- источник откуда брать файл scss (return возвращает значение)
				.pipe(sass())					 -- труба, через которую проходит scss
				.pipe(gulp.dest('app/css'))		 -- куда это должно "выливаться"
	});
	
	Создается папка css с файлом style.css
	
 ВАЖНО!!! -- для компиляции scss в css нужно каждый раз вводить команду gulp sass. Но это можно автоматизировать!!
 
 ВАЖНО!!! -- для добпаления разных опций плагинов можно читать их документацию и прописывать сюда .pipe(sass(____))!!
  например {outputStyle: 'compressed'}

14. Подключаем плагин, который занимается переименованием (один раз написали и он работает. Плагин называется gulp-rename)
	rename = require('gulp-rename);
	.pipe(rename({suffix : '.min'}))
	Результат: создается файл style.min.css после чего style.css можно удалить.
	
15. Подключаем плагин, который следит за изменениями. 
	метод: если происходят изменения в style.scss запускается плагин "parallel"
	gulp.task('watch', function(){
	gulp.watch('app/scss/style.scss', gulp.parallel('sass'));
	});
	
16. подключаем BrowserSync -- позволяет не обновлять страницу вручную для отображения изменений html, css, js
	npm i browser-sync --save-dev   и let browserSync = require('browser-sync');
	ВАЖНО!!! -- ПОЧИТАТЬ ДОКУМЕНТАЦИЮ ПЛАГИНА!!
		gulp.task('browser-sync', function() {  -- подключение в gulpfile.js
    			browserSync.init({
     			server: {
     		       	baseDir: "./" -- директория (вместо точки ставим папку со своими файлами)
      			  }
    			});
		});
	/* подключаем BrowserSync для css*/
.pipe(browserSync.reload({ stream: true }))  -- в gulp.task для css

	/* подключаем BrowserSync для html*/
gulp.task('html', function (){
  return gulp.src('app/*.html')
          .pipe(browserSync.reload({ stream: true }))
});

/* подключаем BrowserSync для js*/
gulp.task('js', function (){
  return gulp.src('app/js/*.js')
          .pipe(browserSync.reload({ stream: true }))
});

Как это выглядит в gulp.watch

/* Подключаем плагин, который следит за изменениями */
gulp.task('watch', function () {
  /* метод: если происходят изменения в style.scss запускается плагин "parallel" */
  gulp.watch('app/scss/style.scss', gulp.parallel('sass'))
  gulp.watch('app/*.html', gulp.parallel('html'))
  gulp.watch('app/js/*.js', gulp.parallel('js'))
});

17. /* Запускаем task, который позволит автоматически обновлять страницу и работать с терминалом (gulp watch не будет забивать эфир). 
       Пишем задание, default, за кем он будет наблюдать (за заданием gulp.parallel и плагинами, которые мы вписываем)  */

	gulp.task('default', gulp.parallel('sass', 'watch', 'browser-sync'))		
	
18. Подключаем gulp-autoprefixer -- поддерживает старые браузеры.

	.pipe(sass({ outputStyle: 'compressed' }))
          .pipe(rename({ suffix: '.min' }))

          /* труба autoprefixer*/
          .pipe(autoprefixer({ 			   -- пишем перед пунктом назначения
            browsers: ['last 8 versions']  --последние 8 версий
           }))
          /* Куда это все выливается */
          .pipe(gulp.dest('app/css'))
	
19. Устанавливаем normalize.css	
	
20. Подключаем плагин (gulp-concat), который собирает (для конкатинации) все файлы CSS и JS в libs.css и libs.js
	а с помощью gulp-uglify мы эти файлы минифицируем в libs.min.css и libs.min.js

	
	
	
	